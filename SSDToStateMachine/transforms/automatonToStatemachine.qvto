modeltype UML uses "http://www.eclipse.org/uml2/5.0.0/UML";
modeltype IOAutomatonModel uses "mm:ioautomaton";

transformation automatonToStatemachine(in automata: IOAutomatonModel, out statemachines: UML);

main() {
	log("\n\nTransformation IOAutomatonModel -> Statemachine");
	log("#Automaton container: " + automata.objectsOfType(AutomatonContainer)->size().toString());
	var automatacontainer := automata.objectsOfType(AutomatonContainer);
	automatacontainer->map automatonContainerToStatemachineContainer();	
}

mapping AutomatonContainer::automatonContainerToStatemachineContainer() : UML::Model {
	log("#Automata: " + self.automaton->size().toString());
	
	var statemachine := createUMLModel();
	
	statemachine.packagedElement += self.automaton->map automatonToStatemachine();
}

query createUMLModel() : UML::Model {
	return object UML::Model {
		name := "Generated state machine from sequence diagrams";
	};
}


mapping Automaton::automatonToStatemachine() : UML::StateMachine {
	log("\nMapping automaton of sender " + self.sender);
	
	name := "UML State Machine for " + self.sender;
		
	var mainRegion = createRegion(self);
	region += mainRegion; 

}

query createRegion(automaton: Automaton) : UML::Region {
	
	var region := object UML::Region {
		name := "Main region from state machine for " + automaton.sender;
	};
	
	region.subvertex += automaton.state.map createUMLStableState();
	
	var activityStates := automaton.map createUMLActivityState();
	region.subvertex += activityStates;	
	region.transition += automaton.createTransitions(activityStates);
	
	activityStates->forEach(state) {
		 var machineWithExits := state.createSubmachine(automaton.transition);
		 state.submachine := machineWithExits.machine;
		 
		 machineWithExits.exitpoints->forEach(exitpoint) {
			
			var  outgoingumltransition := object UML::Transition {
				name := state.name + " -> " + exitpoint.nextState.name + "with return " + exitpoint.returnValue;
				source := exitpoint.exitpoint;
				target := region.subvertex->findVertexWithName(exitpoint.nextState.name);
				
				effect := object OpaqueBehavior {
					name := "/return " + exitpoint.returnValue;
					body := "/return " + exitpoint.returnValue;
					language := "en";
				};
			
				log("Transition added: " + name + " with return value " + exitpoint.returnValue);
			};
			
			region.transition += outgoingumltransition;
		};
	};
	
	return region;
}

query Automaton::createTransitions(states: Set(UML::Vertex)) : Set(UML::Transition) {
	
	var resultSet : Set(UML::Transition);
	
	//save the already added transitions, adding them once is sufficient
	var addedTransitions: Set(String);
		
	self.transition->forEach(transition) {
		
		if (not addedTransitions->exists(t | t = transition.prestate.name + " -> " + transition.operation.name)) {
			
			var  ingoingumltransition := object UML::Transition {
				name := transition.prestate.name + " -> " + transition.operation.name;
				addedTransitions += name;
				source := states->findVertexWithName(transition.prestate.name);
				target := states->findVertexWithName(": " + transition.operation.name);
				trigger := object UML::Trigger {
					name := transition.operation.name;
				};
				log("Transition added: " + name + " with trigger " + transition.operation.name);
			};
			
			resultSet += ingoingumltransition;
		};
		
	};
	
	
	return resultSet;
	
}

query UML::State::createSubmachine(transitions : Set(ioautomaton::Transition)) : StatemachineExitpoint {
	
	var statemachine := object  UML::StateMachine {
		name := self.name;
	};
	
	var region = object UML::Region { 
		name := "Main region of statemachine from activity state " + self.name; 
	};
	statemachine.region += region;
	
	var entry := object UML::Pseudostate {
		kind := UML::PseudostateKind::entryPoint;
	};
	
	region.subvertex += entry;
	
	var transitionsWithCorrectOperationName := transitions->select(t | t.operation.name = self.name.substituteFirst(": ", ""));
	log("For operation " + self.name.substituteFirst(": ", "") + ", " + transitionsWithCorrectOperationName->size().toString() + " relevant tranistions were found");
	
	var exits := self.createStateForOutMessage(transitionsWithCorrectOperationName, region, entry, null, 1);
		
	return object StatemachineExitpoint {
		machine := statemachine;
		exitpoints := exits;
	};
	
}

intermediate class StatemachineExitpoint {
	machine : StateMachine;
	exitpoints: Set(ExitConnectionReturn);
}

intermediate class ExitConnectionReturn {
	exitpoint : Pseudostate;
	returnValue : String;
	nextState: ioautomaton::State;
}

helper UML::State::createStateForOutMessage(transitionsWithCorrectOperationName : Set(ioautomaton::Transition), inout region : Region, inout previousState : UML::Vertex, previousReturn : String, outMessageIndex : Integer) : Set(ExitConnectionReturn) {
	
	var allReceiverNames : Set(String);
	var receiverOperationDict : Dict(String, Set(String));
	
	var returnSet : Set(ExitConnectionReturn);
		
	transitionsWithCorrectOperationName->forEach(t) {
		
		if (t.outmessage->size() < outMessageIndex) {
			
			var exit := object UML::Pseudostate {
				kind := UML::PseudostateKind::exitPoint;
			};
			
			returnSet += object ExitConnectionReturn {
				exitpoint := exit;
				if (previousReturn = null) {
					returnValue := "void";
				} else {
					returnValue := previousReturn;
				};
				nextState := t.poststate;
			};
			
			region.transition += object UML::Transition {
				name := previousState.name + " -> exit";
				source := previousState;
				target := exit;
			};
		};
		
		var receiver := t.outmessage->at(outMessageIndex)._object.name;			
		if (not allReceiverNames->exists(s | s = receiver) and t.outmessage->at(outMessageIndex)._return.value != "void") {
			allReceiverNames += receiver;
			receiverOperationDict->put(receiver, object Set(String){});
			log("Receiver name " + receiver + " added");
		} else {
			log("Receiver already added");
		};
		if (not receiverOperationDict->get(receiver)->exists(s | s = t.outmessage->at(outMessageIndex).operation.name)) {
			var recSet := receiverOperationDict->get(receiver);
			recSet += t.outmessage->at(outMessageIndex).operation.name;
			receiverOperationDict->put(receiver, recSet);
			
			var opname : String;			
			if (t.outmessage->at(outMessageIndex).operation = null) {
				opname := "null";
			} else {
				opname := t.outmessage->at(outMessageIndex).operation.name;
			};
			log("For receiver name " + receiver + " the operation " + opname + " was found");
		} else {
			log("Receiver operation combination already added");
		}		
	};
	
	if (allReceiverNames->size() = 0) {
		return null;
	};
	
	allReceiverNames->forEach(receiver) {		
		receiverOperationDict->get(receiver)->forEach(operation) {
			
			var relevantTransitions := transitionsWithCorrectOperationName->select(t | 	t.outmessage->at(outMessageIndex)._object.name = receiver and 
																						t.outmessage->at(outMessageIndex).operation.name = operation);
			
			var opname : String;			
			if (operation = null) {
				opname := "null";
			} else {
				opname := operation;
			};
			log("#relevant transitions for receiver " + receiver + " and operation " + opname + " : " + relevantTransitions->size().toString());
			
			var state := object UML::State {
				name := receiver + "." + operation;
				doActivity := object OpaqueBehavior {
					if (relevantTransitions->any(true).outmessage->at(outMessageIndex)._return.value != "void") {
						name := "check := " + receiver + "." + operation;
						body := "check := " + receiver + "." + operation;
					} else {
						name := receiver + "." + operation;
						body := receiver + "." + operation;
					};
					language := "en";
				}
			};
			
			region.subvertex += state;
			
			region.transition += object UML::Transition {
				name := previousState.name + " -> " + receiver + "." + operation;
				source := previousState;
				target := state;
				
				if (previousReturn != null) {
					guard := object UML::Constraint {
						name := "[check = " + previousReturn + "]";
						specification := object UML::OpaqueExpression {
							name := "check = " + previousReturn;
							body := "check = " + previousReturn;
							language := "en";
						};
					}
				}
			};
			
			var possibleReturnValues : Set(String);
			relevantTransitions->forEach(t) {
				if (not possibleReturnValues->exists(s | s = t._return.value) and not (t._return.value = "void")) {
					possibleReturnValues += t._return.value;
				}
			};
			
			if (not possibleReturnValues->isEmpty()) {
				possibleReturnValues->forEach(returnVal) {
					returnSet += self.createStateForOutMessage(relevantTransitions, region, state, returnVal, outMessageIndex + 1);
				}
			} else {
				returnSet += self.createStateForOutMessage(relevantTransitions, region, state, null, outMessageIndex + 1);
			}
		}
	};
	
	return returnSet;
}

query Set(UML::Vertex)::findVertexWithName(name : String) : UML::Vertex {	
		
	self->forEach(vertex) {
		if (vertex.name = name) {
			return vertex;
		}
	};
	
	log("!!!!! vertex with name " + name + "not found");
	return null;
}

mapping ioautomaton::State::createUMLStableState() : State {
	
	init {	
		result := object UML::State {
			name := self.name;
			log("State " + name + " created");
		};
	}
}

mapping Automaton::createUMLActivityState() : Set(UML::State) {
	init {	
		var states: Set(String);
		
		self.transition->forEach(transition) {
			
			if (not states->exists(s | s = transition.operation.name))	{	
				result += object UML::State {
					name := ": " + transition.operation.name;
					states += transition.operation.name;
					log("State " + name + " created");
				};
			}
		}
	}
	
}

