modeltype BehaviourModel uses "mm:behaviour";
modeltype ScenarioModel uses "mm:sequencediagram";


transformation scenarioToBehaviour(in scenarios: ScenarioModel, out behaviour: BehaviourModel) ;

main() {
	log("\n\nTransformation Scenario -> Behaviour");
	var scenariocontainer := scenarios.objectsOfType(ScenarioContainer);
	scenariocontainer->map scenarioContainerToBehaviourContainer();
}

mapping ScenarioContainer::scenarioContainerToBehaviourContainer() : BehaviourContainer {
	
	var mappedScenarios := self.scenario->map scenarioToBehaviours();
	
	mappedScenarios->forEach(behaviours) {
		result.behaviour += result.behaviour->union(behaviours);
	}
}

mapping Scenario::scenarioToBehaviours() : Set(Behaviour) {
	init {
	
		log("Mapping scenario to behaviours");
	
		var communications := self.allSubobjectsOfKind(Communication);
		
		var systemmessages : Set(SystemMessage);
		var usermessages : Set(UserMessage);
		communications->forEach(comm | comm.oclIsTypeOf(SystemCommunication)) {
			var systemComm := comm.oclAsType(SystemCommunication);
			systemmessages += systemComm.systemmessage;
		};
		communications->forEach(comm | comm.oclIsTypeOf(UserCommunication)) {
			var userComm := comm.oclAsType(UserCommunication);
			usermessages += userComm.usermessage;
		};
		
		var systemObjects : Set(SystemObject);
		systemmessages->forEach(sysmsg) {
			if (sysmsg._object.oclIsTypeOf(SystemObject)) {
				var sysobj := sysmsg._object.oclAsType(SystemObject);
				if (not systemObjects->containsSystemObjectWithName(sysobj.name)) {
					systemObjects += sysobj;
				}
			};
			if (not systemObjects->containsSystemObjectWithName(sysmsg.systemobject.name)) {
					systemObjects += sysmsg.systemobject;
			};
		};
		usermessages->forEach(usermsg) {
			if (usermsg._object.oclIsTypeOf(SystemObject)) {
				var sysobj := usermsg._object.oclAsType(SystemObject);
				if (not systemObjects->containsSystemObjectWithName(sysobj.name)) {
					systemObjects += sysobj;
				}
			};
		};
		
		log("#SystemObjects: " + systemObjects->size().toString());
		
		systemObjects->forEach(systemObject) {
			
			log("SystemObject: "+ systemObject.name);
			var behaviour:= self.createBehaviour(systemObject.name);
			var communicationsForSysObject := self.communication->getCommunicationsForSystemObject(systemObject);
				
			behaviour.block := communicationsForSysObject->map communicationsToBlocks(systemObject);
			result += behaviour;
			log("#Behaviours until now: " + result->size().toString());				
				
		};


	}
}

mapping OrderedSet(Communication)::communicationsToBlocks(systemObject: SystemObject) : OrderedSet(Block) {
	init {
		log("creating blocks out of the communications from " + systemObject.name);
		self->forEach(comm) {
			var block : Block;
			
			//TODO
			if(comm.oclIsTypeOf(SystemCommunication)) {
				var systemComm := comm.oclAsType(SystemCommunication);
				
				//map communication to a new block
				if(systemComm.systemmessage.systemobject.name = systemObject.name) {
					//receiver of system communication is system object (method argument)
					block := createBlock(systemComm);
					result += block;
				}
				else if (systemComm.systemmessage._object.name = systemObject.name){
					block := result->last();
					block.activation.outmessage += systemComm->map systemCommunicationToOutMessage();
				}
			}
			else if(comm.oclIsTypeOf(UserCommunication)) {
				var userComm := comm.oclAsType(UserCommunication);
				block := result->last();
				block.activation.outmessage += userComm->map userCommunicatonToOutMessage();
			}
		}
	}
	
}

mapping SystemCommunication::systemCommunicationToOutMessage() : OutMessage {
	result.operation := object Operation {
		name := self.systemmessage.operation.name;
	};
	result._object := object Object {
		name := self.systemmessage.systemobject.name;
	};
	result._return := object Return {
		if(self._return.oclIsTypeOf(Void)) {
			value := "void"
		} 
		else {
			var oldReturn := self._return.oclAsType(ssdRoot::Value);
			value := oldReturn.value
		};
	};
	log("new out message: <" + result.operation.name + ", " + result._object.name + ", " + result._return.value + ">");
}

mapping UserCommunication::userCommunicatonToOutMessage() : OutMessage {
	result.operation := object Operation {
		name := self.usermessage.operation.name;
	};
	result._object := object Object {
		name := self.usermessage.user.name;
	};
	result._return := object Return {
		if(self._return.oclIsTypeOf(Void)) {
			value := "void"
		} 
		else {
			var oldReturn := self._return.oclAsType(ssdRoot::Value);
			value := oldReturn.value
		};
	};
	log("new out message: <" + result.operation.name + ", " + result._object.name + ", " + result._return.value + ">");
}





query Scenario::createBehaviour(actor: String) : Behaviour {
	return object Behaviour {
		sender := actor;
	}
}

query OrderedSet(ssdRoot::Communication)::getCommunicationsForSystemObject(systemObject: SystemObject) : OrderedSet(Communication) {
	log("Computing communications for System Object: "+ systemObject.name);
	var communications: OrderedSet(Communication);
	
	self->forEach(comm) {
		if (comm.oclIsKindOf(SystemCommunication)) {
			var systemComm := comm.oclAsType(SystemCommunication);
			if	(systemComm.systemmessage._object.name = systemObject.name or
				systemComm.systemmessage.systemobject.name = systemObject.name) {
					communications += comm;
			}
		}
		else if (comm.oclIsKindOf(UserCommunication)) {
			var userComm := comm.oclAsType(UserCommunication);
			if(userComm.usermessage._object.name = systemObject.name) {
				communications += comm;
			}
		}
	};
	
	log("#communications: "+ communications->size().toString());
	return communications;
}
query createBlock(systemCommunication: SystemCommunication) : Block {
	return object Block {
		prestate := object State {
			name := systemCommunication.firstState.name
		};
		poststate := object State {
			name := systemCommunication.secondState.name
		};
		inmessage := object InMessage {
			operation := object Operation {
				name := systemCommunication.systemmessage.operation.name
			}
		};
		activation := object Activation {
			if(systemCommunication._return.oclIsTypeOf(Void)) {
				_return := object Return{
					value := "void"
				}
			} else {
				var oldReturn := systemCommunication._return.oclAsType(ssdRoot::Value);
				_return := object Return{
					value := oldReturn.value
				}
			};
		}
	}
}

query Set(SystemObject)::containsSystemObjectWithName(sysObjName : String) : Boolean {
	
	self->forEach(sysobj) {
		if (sysobj.name = sysObjName) {
			return true;
		}
	};
	return false;
}

