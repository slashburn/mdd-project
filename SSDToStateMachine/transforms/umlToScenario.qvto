modeltype UML uses  "http://www.eclipse.org/uml2/5.0.0/UML";
modeltype ScenarioModel uses "mm:sequencediagram";

transformation umlToScenario(in ssd: UML, out scenarios: ScenarioModel) ;

property actorStateDict : Dict(String, String);
main() {
	ssd.objectsOfType(Interaction)->map interactionToScenario();
}


mapping Interaction::interactionToScenario() : Scenario {
	self.fragment->forEach(interactionFragment) {
		
		
		if (interactionFragment.oclIsTypeOf(StateInvariant)) {
			var stateInvariant := interactionFragment.oclAsType(StateInvariant);
			var lifelines := stateInvariant.covered;
			lifelines->forEach(lifeline) {
				actorStateDict->put(lifeline.name, stateInvariant.name);
				communication->forEach(comm | comm.oclIsKindOf(SystemCommunication)) {
					var systemCommunication := comm.oclAsType(SystemCommunication);
					//check if there is no postState
					if (systemCommunication.secondState = null and systemCommunication.systemmessage.systemobject.name = lifeline.name) {
						systemCommunication.secondState := lifeline.createStateFromDict();
					}
					
				}
			};
			
			
		}
		else if (interactionFragment.oclIsTypeOf(MessageOccurrenceSpecification))  {
			var mos = interactionFragment.oclAsType(MessageOccurrenceSpecification);
			if (mos.isSend()){
				if (mos.message.messageSort = MessageSort::synchCall) {
					if (mos.message.receiveEvent.isUser()) {
						communication +=  mos.message.map messageToUserCommunication();
					}	
					else {
						communication +=  mos.message.map messageToSystemCommunication();
					}
				}
			}
			else {
				
				var allSystemCommunications : Sequence(SystemCommunication) := communication->select(comm | comm.oclIsTypeOf(SystemCommunication)).oclAsType(OrderedSet(SystemCommunication));							
				var allMatchingCommunications = allSystemCommunications->select(comm | comm.requestMatchesReply(mos.message));									
				var matchedRequest := allSystemCommunications->last();
				//var request : SystemCommunication := communication->select(c | c.oclIsTypeOf(SystemCommunication) and c.oclAsType(SystemCommunication).requestMatchesReply(mos.message))->last().oclAsType(SystemCommunication);
				matchedRequest._return := createValueReturn(mos.message.name);
			}
		
		}
	};
		
}


	
mapping Message::messageToUserCommunication() : UserCommunication {
	
	usermessage := self.createUserMessage();
	_return := createVoidReturn();
}

mapping Message::messageToSystemCommunication() : SystemCommunication {
	firstState := self.receiveEvent.lifeline().createStateFromDict();
	systemmessage := self.createSystemMessage();
	_return := createVoidReturn();
}


mapping Lifeline::userLifelineToUserCommunication() : UserCommunication {
	var interaction : Interaction = self.container().oclAsType(Interaction);
}

mapping Interaction::interactionToSystemCommunication() : SystemCommunication when {
	not(self.name.toLowerCase().endsWith("user")); //we're only dealing with system interactions here
}{
	
		
}

query SystemCommunication::requestMatchesReply(reply: Message) : Boolean {
	return 	self._return.oclIsTypeOf(Void) and
			self.systemmessage.systemobject.name = reply.sendEvent.lifeline().name and
			self.systemmessage._object.name = reply.receiveEvent.lifeline().name;
}


/**********************

	Factory Methods
	 
***********************/

query Message::createUserMessage() : UserMessage {
	return object UserMessage {
		_object := self.createObject();
		operation := self.createOperation();
		user := self.createUser()
	}
}


query Message::createSystemMessage() : SystemMessage {
	return object SystemMessage {
		_object := self.createObject();
		operation := self.createOperation();
		systemobject := self.receiveEvent.createSystemObject()
	}
}
query Message::createOperation() : ssdRoot::Operation {
	return object ssdRoot::Operation {
		name := self.name;
	}	
}

query Message::createObject() : ssdRoot::Object {
	if(self.sendEvent.isUser()) {
		return self.createUser();
	};
	return self.sendEvent.createSystemObject();
}
query Message::createUser() : ssdRoot::User {
	return object ssdRoot::User {
		name := "user";
	}
}

query MessageEnd:: createSystemObject() : ssdRoot::SystemObject {
	return object SystemObject {
		name := self.lifeline().name
	}
}
query createVoidReturn() :Return {
	return object Void {};
}
query createValueReturn(val : String) : Return {
	return object Value {
		value := val;
	}
}

query MessageEnd::lifeline() : Lifeline {
	return self.oclAsType(MessageOccurrenceSpecification).getCovered();
}
query MessageEnd::isUser() : Boolean {

	return self.lifeline().name.isUser();
}
query String::isUser() : Boolean {
	return self.toLower() = "user";
}
query Lifeline::createStateFromDict() : ssdRoot::State {
	return object ssdRoot::State {
		name := actorStateDict->get(self.name);
	}
}


